//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 
namespace GTSWebServiceProxy {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'EndpointReference' from namespace 'http://www.w3.org/2005/08/addressing' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WSHttpBinding_TotalWebService", Namespace="http://tempuri.org/")]
    public partial class TotalWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback FillByPersonIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillByPersonBarCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteRuleByPersonBarcodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteRuleByPersonIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoMapByPersonIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoMapByBarcodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoMapOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompileAssembliesOperationCompleted;
        
        /// <remarks/>
        public TotalWebService() {
            this.SoapVersion = System.Web.Services.Protocols.SoapProtocolVersion.Soap12;
            string urlSetting = null;
            if ((urlSetting != null)) {
                this.Url = urlSetting;
            }
            else {
                this.Url = "http://safari.ghadir.local/GTSWebService/TotalWebService.svc";
            }
        }
        
        /// <remarks/>
        public event FillByPersonIDCompletedEventHandler FillByPersonIDCompleted;
        
        /// <remarks/>
        public event FillByPersonBarCodeCompletedEventHandler FillByPersonBarCodeCompleted;
        
        /// <remarks/>
        public event ExecuteRuleCompletedEventHandler ExecuteRuleCompleted;
        
        /// <remarks/>
        public event ExecuteRuleByPersonBarcodeCompletedEventHandler ExecuteRuleByPersonBarcodeCompleted;
        
        /// <remarks/>
        public event ExecuteRuleByPersonIdCompletedEventHandler ExecuteRuleByPersonIdCompleted;
        
        /// <remarks/>
        public event DoMapByPersonIDCompletedEventHandler DoMapByPersonIDCompleted;
        
        /// <remarks/>
        public event DoMapByBarcodeCompletedEventHandler DoMapByBarcodeCompleted;
        
        /// <remarks/>
        public event DoMapCompletedEventHandler DoMapCompleted;
        
        /// <remarks/>
        public event CompileAssembliesCompletedEventHandler CompileAssembliesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TotalWebService/FillByPersonID", RequestNamespace="http://tempuri.org/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FillByPersonID(decimal PersonId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PersonIdSpecified) {
            this.Invoke("FillByPersonID", new object[] {
                        PersonId,
                        PersonIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFillByPersonID(decimal PersonId, bool PersonIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FillByPersonID", new object[] {
                        PersonId,
                        PersonIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndFillByPersonID(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void FillByPersonIDAsync(decimal PersonId, bool PersonIdSpecified) {
            this.FillByPersonIDAsync(PersonId, PersonIdSpecified, null);
        }
        
        /// <remarks/>
        public void FillByPersonIDAsync(decimal PersonId, bool PersonIdSpecified, object userState) {
            if ((this.FillByPersonIDOperationCompleted == null)) {
                this.FillByPersonIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillByPersonIDOperationCompleted);
            }
            this.InvokeAsync("FillByPersonID", new object[] {
                        PersonId,
                        PersonIdSpecified}, this.FillByPersonIDOperationCompleted, userState);
        }
        
        private void OnFillByPersonIDOperationCompleted(object arg) {
            if ((this.FillByPersonIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillByPersonIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TotalWebService/FillByPersonBarCode", RequestNamespace="http://tempuri.org/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FillByPersonBarCode([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PersonBarCode) {
            this.Invoke("FillByPersonBarCode", new object[] {
                        PersonBarCode});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFillByPersonBarCode(string PersonBarCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FillByPersonBarCode", new object[] {
                        PersonBarCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndFillByPersonBarCode(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void FillByPersonBarCodeAsync(string PersonBarCode) {
            this.FillByPersonBarCodeAsync(PersonBarCode, null);
        }
        
        /// <remarks/>
        public void FillByPersonBarCodeAsync(string PersonBarCode, object userState) {
            if ((this.FillByPersonBarCodeOperationCompleted == null)) {
                this.FillByPersonBarCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillByPersonBarCodeOperationCompleted);
            }
            this.InvokeAsync("FillByPersonBarCode", new object[] {
                        PersonBarCode}, this.FillByPersonBarCodeOperationCompleted, userState);
        }
        
        private void OnFillByPersonBarCodeOperationCompleted(object arg) {
            if ((this.FillByPersonBarCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillByPersonBarCodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TotalWebService/ExecuteRule", RequestNamespace="http://tempuri.org/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteRule() {
            this.Invoke("ExecuteRule", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteRule(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteRule", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndExecuteRule(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ExecuteRuleAsync() {
            this.ExecuteRuleAsync(null);
        }
        
        /// <remarks/>
        public void ExecuteRuleAsync(object userState) {
            if ((this.ExecuteRuleOperationCompleted == null)) {
                this.ExecuteRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteRuleOperationCompleted);
            }
            this.InvokeAsync("ExecuteRule", new object[0], this.ExecuteRuleOperationCompleted, userState);
        }
        
        private void OnExecuteRuleOperationCompleted(object arg) {
            if ((this.ExecuteRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteRuleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TotalWebService/ExecuteRuleByPersonBarcode", RequestNamespace="http://tempuri.org/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteRuleByPersonBarcode([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PersonBarCode) {
            this.Invoke("ExecuteRuleByPersonBarcode", new object[] {
                        PersonBarCode});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteRuleByPersonBarcode(string PersonBarCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteRuleByPersonBarcode", new object[] {
                        PersonBarCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndExecuteRuleByPersonBarcode(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ExecuteRuleByPersonBarcodeAsync(string PersonBarCode) {
            this.ExecuteRuleByPersonBarcodeAsync(PersonBarCode, null);
        }
        
        /// <remarks/>
        public void ExecuteRuleByPersonBarcodeAsync(string PersonBarCode, object userState) {
            if ((this.ExecuteRuleByPersonBarcodeOperationCompleted == null)) {
                this.ExecuteRuleByPersonBarcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteRuleByPersonBarcodeOperationCompleted);
            }
            this.InvokeAsync("ExecuteRuleByPersonBarcode", new object[] {
                        PersonBarCode}, this.ExecuteRuleByPersonBarcodeOperationCompleted, userState);
        }
        
        private void OnExecuteRuleByPersonBarcodeOperationCompleted(object arg) {
            if ((this.ExecuteRuleByPersonBarcodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteRuleByPersonBarcodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TotalWebService/ExecuteRuleByPersonId", RequestNamespace="http://tempuri.org/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteRuleByPersonId(decimal PersonId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PersonIdSpecified) {
            this.Invoke("ExecuteRuleByPersonId", new object[] {
                        PersonId,
                        PersonIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteRuleByPersonId(decimal PersonId, bool PersonIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteRuleByPersonId", new object[] {
                        PersonId,
                        PersonIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndExecuteRuleByPersonId(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ExecuteRuleByPersonIdAsync(decimal PersonId, bool PersonIdSpecified) {
            this.ExecuteRuleByPersonIdAsync(PersonId, PersonIdSpecified, null);
        }
        
        /// <remarks/>
        public void ExecuteRuleByPersonIdAsync(decimal PersonId, bool PersonIdSpecified, object userState) {
            if ((this.ExecuteRuleByPersonIdOperationCompleted == null)) {
                this.ExecuteRuleByPersonIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteRuleByPersonIdOperationCompleted);
            }
            this.InvokeAsync("ExecuteRuleByPersonId", new object[] {
                        PersonId,
                        PersonIdSpecified}, this.ExecuteRuleByPersonIdOperationCompleted, userState);
        }
        
        private void OnExecuteRuleByPersonIdOperationCompleted(object arg) {
            if ((this.ExecuteRuleByPersonIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteRuleByPersonIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TotalWebService/DoMapByPersonID", RequestNamespace="http://tempuri.org/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DoMapByPersonID(decimal personId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool personIdSpecified) {
            this.Invoke("DoMapByPersonID", new object[] {
                        personId,
                        personIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoMapByPersonID(decimal personId, bool personIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoMapByPersonID", new object[] {
                        personId,
                        personIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDoMapByPersonID(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DoMapByPersonIDAsync(decimal personId, bool personIdSpecified) {
            this.DoMapByPersonIDAsync(personId, personIdSpecified, null);
        }
        
        /// <remarks/>
        public void DoMapByPersonIDAsync(decimal personId, bool personIdSpecified, object userState) {
            if ((this.DoMapByPersonIDOperationCompleted == null)) {
                this.DoMapByPersonIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoMapByPersonIDOperationCompleted);
            }
            this.InvokeAsync("DoMapByPersonID", new object[] {
                        personId,
                        personIdSpecified}, this.DoMapByPersonIDOperationCompleted, userState);
        }
        
        private void OnDoMapByPersonIDOperationCompleted(object arg) {
            if ((this.DoMapByPersonIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoMapByPersonIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TotalWebService/DoMapByBarcode", RequestNamespace="http://tempuri.org/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DoMapByBarcode([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string barcode) {
            this.Invoke("DoMapByBarcode", new object[] {
                        barcode});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoMapByBarcode(string barcode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoMapByBarcode", new object[] {
                        barcode}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDoMapByBarcode(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DoMapByBarcodeAsync(string barcode) {
            this.DoMapByBarcodeAsync(barcode, null);
        }
        
        /// <remarks/>
        public void DoMapByBarcodeAsync(string barcode, object userState) {
            if ((this.DoMapByBarcodeOperationCompleted == null)) {
                this.DoMapByBarcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoMapByBarcodeOperationCompleted);
            }
            this.InvokeAsync("DoMapByBarcode", new object[] {
                        barcode}, this.DoMapByBarcodeOperationCompleted, userState);
        }
        
        private void OnDoMapByBarcodeOperationCompleted(object arg) {
            if ((this.DoMapByBarcodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoMapByBarcodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TotalWebService/DoMap", RequestNamespace="http://tempuri.org/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DoMap() {
            this.Invoke("DoMap", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoMap(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoMap", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDoMap(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DoMapAsync() {
            this.DoMapAsync(null);
        }
        
        /// <remarks/>
        public void DoMapAsync(object userState) {
            if ((this.DoMapOperationCompleted == null)) {
                this.DoMapOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoMapOperationCompleted);
            }
            this.InvokeAsync("DoMap", new object[0], this.DoMapOperationCompleted, userState);
        }
        
        private void OnDoMapOperationCompleted(object arg) {
            if ((this.DoMapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoMapCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TotalWebService/CompileAssemblies", RequestNamespace="http://tempuri.org/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CompileAssemblies() {
            this.Invoke("CompileAssemblies", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompileAssemblies(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompileAssemblies", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCompileAssemblies(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CompileAssembliesAsync() {
            this.CompileAssembliesAsync(null);
        }
        
        /// <remarks/>
        public void CompileAssembliesAsync(object userState) {
            if ((this.CompileAssembliesOperationCompleted == null)) {
                this.CompileAssembliesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompileAssembliesOperationCompleted);
            }
            this.InvokeAsync("CompileAssemblies", new object[0], this.CompileAssembliesOperationCompleted, userState);
        }
        
        private void OnCompileAssembliesOperationCompleted(object arg) {
            if ((this.CompileAssembliesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompileAssembliesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void FillByPersonIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void FillByPersonBarCodeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ExecuteRuleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ExecuteRuleByPersonBarcodeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ExecuteRuleByPersonIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DoMapByPersonIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DoMapByBarcodeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DoMapCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CompileAssembliesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
